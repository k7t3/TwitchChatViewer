plugins {
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.1.0'
    id 'project-report'
}

group = 'io.github.k7t3'
version = '1.0.0'

repositories {
    mavenCentral()
}

java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

compileJava {
    options.encoding = 'UTF-8'
}

compileTestJava {
    options.encoding = 'UTF-8'
}

javafx {
    version = '22.0.1'
    // 非モジュールアプリケーション向けに完全なモジュール定義
    // https://github.com/openjfx/javafx-gradle-plugin
    modules = [ 'javafx.controls', 'javafx.fxml', 'javafx.swing' ]
}

application {
    mainClass = 'com.github.k7t3.tcv.view.Launcher'
    applicationName = 'Twitch Chat Viewer'
}

dependencies {

    // Logger
    implementation 'org.slf4j:slf4j-api:2.0.11'
    implementation 'org.slf4j:slf4j-jdk14:2.0.11'

    // Twitchクライアント
    implementation 'com.github.twitch4j:twitch4j:1.20.0'

    // キャッシュ
    implementation 'com.github.ben-manes.caffeine:caffeine:3.1.8'

    // 永続化
    implementation 'org.xerial:sqlite-jdbc:3.45.3.0'

    // Twitch認証用のQRコード生成
    implementation 'com.google.zxing:javase:3.5.3'

    // AtlantaFXと同じアイコンパックを使用する
    implementation 'io.github.mkpaz:atlantafx-base:2.0.1'
    implementation 'org.kordamp.ikonli:ikonli-javafx:12.3.1'
    implementation 'org.kordamp.ikonli:ikonli-feather-pack:12.3.1'
    implementation 'org.kordamp.ikonli:ikonli-material2-pack:12.3.1'

    // アイコンパック
    implementation 'org.kordamp.ikonli:ikonli-fontawesome5-pack:12.3.1'

    // MVVM
    implementation "de.saxsys:mvvmfx:1.8.0"

    // チャットビュー用のVirtualFlow
    implementation 'org.fxmisc.flowless:flowless:0.7.2'

    // テスト
    testImplementation platform('org.junit:junit-bom:5.9.1')
    testImplementation 'org.junit.jupiter:junit-jupiter'

    testImplementation 'org.testfx:testfx-junit5:4.0.18'
    testImplementation 'org.assertj:assertj-core:3.13.2'
    testImplementation 'org.hamcrest:hamcrest:2.1'


    testImplementation 'org.mockito:mockito-core:5.11.0'
}

// SSL通信のためにjdk.crypto.ecモジュールが必要
// https://stackoverflow.com/questions/63932217/java-ssl-handshake-failure-if-app-built-with-jpackage
def cryptoPackage = 'jdk.crypto.ec'

def jdkModules = ''
tasks.register('checkJDKModules', Exec) {
    dependsOn jar, copyDependencies, copyJavaFXModules

    // プラットフォームに依存したクラスパスのセパレータ
    var s = org.gradle.internal.os.OperatingSystem.current().isWindows()
            ? ';'
            : ':'

    commandLine 'jdeps',
            '--add-modules', 'ALL-MODULE-PATH',
            '--multi-release', '9',
            '--ignore-missing-deps',
            '--print-module-deps',
            '--class-path', "build/libs/*${s}build/javafx/*",
            "build/libs/tcv-${version}.jar"

    standardOutput = new ByteArrayOutputStream()
    ext.output = { return standardOutput.toString().trim() }
    doLast {
        jdkModules = output()
        if (!jdkModules.contains(cryptoPackage)) {
            jdkModules += ',' + cryptoPackage
        }
    }
}

tasks.register('copyDependencies', Copy) {
    from configurations.runtimeClasspath
    into 'build/libs'
    exclude 'javafx-**'
}

tasks.register('copyJavaFXModules', Copy) {
    from configurations.runtimeClasspath
    into 'build/javafx'
    include 'javafx-**'
}

def deployDir = 'build/app'
tasks.register('make', Exec) {
    group = 'distribution'
    description = 'アプリケーションパッケージを生成するタスク'
    dependsOn checkJDKModules

    doFirst {
        delete deployDir
    }

    var commandArgs = [
            'jpackage',
            '--verbose',
            '--name', 'Twitch Chat Viewer',
            '--description', 'Twitch Chat Viewer',
            '--copyright', 'Copyright (c) 2024 k7t3. All rights reserved.',
            '--vendor', 'k7t3',
            '--app-version', project.version.toString(),
            '--dest', deployDir,
            '--module-path', 'build/javafx',
            '--add-modules', "${-> jdkModules},${javafx.modules.join(',')}",
            '--input', 'build/libs',
            '--main-jar', "${-> tasks.jar.archiveFile.get().asFile.name}",
            '--main-class', application.mainClass.get(),
            '--license-file', 'docs/license.md'
    ]

    def os = org.gradle.internal.os.OperatingSystem.current()

    if (os.isWindows()) {
        commandArgs.addAll('--type', 'exe')
        commandArgs.addAll('--icon', 'src/main/resources/icons/TwitchChatViewer.ico')
        commandArgs.addAll('--win-shortcut')
        commandArgs.addAll('--win-menu')
        commandArgs.addAll('--win-per-user-install')
        commandArgs.addAll('--win-shortcut')
        commandArgs.addAll('--win-upgrade-uuid', 'b78817e8-f9b8-4650-bf0a-34bca5ff4106')
    }
    else if (os.isMacOsX()) {
        commandArgs.addAll('--type', 'dmg')
        commandArgs.addAll('--icon', 'src/main/resources/icons/TwitchChatViewer.icns')
        commandArgs.addAll('--mac-package-identifier', 'TwitchChatViewer')
    }
    else if (os.isLinux()){
        commandArgs.addAll('--type', 'deb')
        commandArgs.addAll('--icon', 'src/main/resources/icons/TwitchChatViewer-64.png')
        commandArgs.addAll('--linux-menu-group', 'Network')
        commandArgs.addAll('--linux-rpm-license-type', 'Apache-2.0')
        commandArgs.addAll('--linux-shortcut')
    }

    commandLine commandArgs
}

test {
    useJUnitPlatform()
}